# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v6LWAzG-fJFgildbNAPW4ASfFcTj2LZe
"""



import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

class KMeansClustering():
  def __init__(self,x,num_clusters):
    self.K = num_clusters
    self.plot_figure = True
    self.max_iterations =100
    self.num_examples,self.num_features = x.shape

  def initialize_random_centroid (self,x):
      centroidss = np.zeros((self.k,self.num_features ))

      for k in range(self.k):
        centroid = x[np.random.choice(range(self.num_examples))]
        centroid[k] = centroid

        return centroid

  def create_cluster(self, X,centroids):
    clusters = [[] for _ in range(self.k)]
    for point_idx, point in enumerate(X):
          closest_centroid = np.argmin(np.sqrt(np.sum((point - centroids)**2, axis=1)))
          clusters[closest_centroid].append(point_idx)

          return clusters



  def calculate_new_centroid(self,cluster,x):
          centroids = np.zeros((self.k,self.num_featurs))

          for idx, cluster in enumerate(clusters):
            new_centroid = np. mean(x[clusters],axis=0)
            centroids[idx] = new_centroid

            return centroids


     def predict_cluster(self,cluster,X):
            y_pred = np.zeros(self.num_examples)

            for cluster_idx,cluster in enumerate(cluster):
              for sample_idx in cluster:
                y_pred[sample_idx] = cluster_idx

                return y_pred


      def plot_fig(self,x,y):
              plt.scatter(x[:,0],x[:,1],c=y, s=40, cmap=plt.cm.spectral)
              plt.show()


     def fit(self,X):
                 centroids = self.initialize_random_centroids(x)

              for it in  range(self.max_iterations):
                clusters = self.create_clusters(x,centroids)
                previous_centroids = centroid
                centroids = self.calculate_new_centoids(clusters,x)

                diff = centroids - previous_centroids

                if  not diff.any():
                  print("termination criteria satisfied,k means has converged")
                  break

                  y_pred = self.predict_cluster(cluster,x)

                if self.plot_figure:
                    self.plot_fig(x,y_pred)

                    return y_pred

if __name__=='__main__':
    np.random.seed(10)
    num_clusters = 3
    X, _ = make_blobs(n_samples=1000, n_features=2, centers=num_clusters)

    KMeans = KMeansClustering(X, num_clusters)
    y_pred = KMeans.fit(X)



